#!/usr/bin/env python3
"""
GPG Backup Manager v1.0.0
Gestor especializado de backups portables de GPG
Prioridad: BACKUP y RESTORE para uso cross-platform

Uso: gpg-manager.py [--init|--gen-key|--backup|--restore|--verify|--list|--help]
"""

import os
import sys
import subprocess
import argparse
import tempfile
import shutil
import hashlib
import getpass
import time
from pathlib import Path
from datetime import datetime
from typing import Optional, List, Dict, Any
import logging

# Configuraci√≥n
BACKUP_DIR = os.path.expanduser("~/secure/gpg/backup")
GPG_HOME = os.path.expanduser("~/.gnupg")

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

class Colors:
    """Colores para output en terminal"""
    RED = '\033[0;31m'
    GREEN = '\033[0;32m'
    YELLOW = '\033[1;33m'
    CYAN = '\033[0;36m'
    NC = '\033[0m'  # No Color

class GPGManager:
    """Gestor principal de GPG"""
    
    def __init__(self):
        self.backup_dir = Path(BACKUP_DIR)
        self.gpg_home = Path(GPG_HOME)
        self.timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
    def log_info(self, message: str):
        """Log de informaci√≥n"""
        print(f"{Colors.CYAN}[INFO]{Colors.NC} {message}")
        
    def log_success(self, message: str):
        """Log de √©xito"""
        print(f"{Colors.GREEN}[SUCCESS]{Colors.NC} {message}")
        
    def log_warning(self, message: str):
        """Log de advertencia"""
        print(f"{Colors.YELLOW}[WARNING]{Colors.NC} {message}")
        
    def log_error(self, message: str):
        """Log de error"""
        print(f"{Colors.RED}[ERROR]{Colors.NC} {message}")
        
    def run_command(self, cmd: List[str], input_data: Optional[str] = None, 
                   capture_output: bool = True, extra_fd: Optional[int] = None,
                   extra_fd_data: Optional[str] = None) -> subprocess.CompletedProcess:
        """Ejecutar comando con manejo de errores"""
        try:
            stdin = subprocess.PIPE if input_data else None
            extra_files = {}
            
            if extra_fd and extra_fd_data:
                # Crear un pipe para el descriptor de archivo extra
                r, w = os.pipe()
                extra_files[extra_fd] = w
                
                # Escribir datos extra en el pipe
                os.write(w, extra_fd_data.encode())
                os.close(w)
                
                result = subprocess.run(
                    cmd,
                    input=input_data,
                    capture_output=capture_output,
                    text=True,
                    check=False,
                    pass_fds=list(extra_files.keys())
                )
                
                # Cerrar el pipe de lectura
                os.close(r)
            else:
                result = subprocess.run(
                    cmd,
                    input=input_data,
                    capture_output=capture_output,
                    text=True,
                    check=False
                )
            
            return result
        except Exception as e:
            self.log_error(f"Error ejecutando comando: {e}")
            raise
            
    def check_gpg_available(self) -> bool:
        """Verificar que GPG est√© disponible"""
        result = self.run_command(["gpg", "--version"])
        return result.returncode == 0
        
    def get_user_key_info(self) -> Dict[str, str]:
        """Obtener informaci√≥n del usuario para la llave"""
        print("\n" + "="*50)
        print("üîë INFORMACI√ìN DE LA LLAVE MAESTRA")
        print("="*50 + "\n")
        
        try:
            # Obtener nombre
            name = input("Nombre completo: ").strip()
            if not name:
                self.log_error("El nombre es requerido")
                sys.exit(1)
                
            # Obtener email
            email = input("Email: ").strip()
            if not email:
                self.log_error("El email es requerido")
                sys.exit(1)
                
            # Obtener comentario (opcional)
            comment = input("Comentario (opcional): ").strip()
            
            # Obtener contrase√±a
            print("\nüîê Contrase√±a para la llave maestra:")
            passphrase = getpass.getpass("Contrase√±a: ")
            if not passphrase:
                self.log_error("La contrase√±a es requerida")
                sys.exit(1)
                
            passphrase_confirm = getpass.getpass("Confirmar contrase√±a: ")
            if passphrase != passphrase_confirm:
                self.log_error("Las contrase√±as no coinciden")
                sys.exit(1)
                
        except (EOFError, KeyboardInterrupt):
            self.log_error("Entrada cancelada o no disponible")
            sys.exit(1)
            
        return {
            "name": name,
            "email": email,
            "comment": comment,
            "passphrase": passphrase
        }
        
    def generate_master_key(self, user_info: Dict[str, str]) -> str:
        """Generar llave maestra"""
        self.log_info("üîë Generando llave maestra (RSA 4096, Certificaci√≥n + Firma)...")
        
        # Crear archivo de configuraci√≥n temporal
        config_content = f"""Key-Type: RSA
Key-Length: 4096
Key-Usage: cert,sign
Name-Real: {user_info['name']}
Name-Email: {user_info['email']}"""
        
        if user_info['comment']:
            config_content += f"\nName-Comment: {user_info['comment']}"
            
        config_content += """
Expire-Date: 0
Passphrase: """ + user_info['passphrase'] + """
%commit"""
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.conf', delete=False) as f:
            f.write(config_content)
            config_file = f.name
            
        try:
            # Generar llave maestra
            result = self.run_command(["gpg", "--batch", "--full-generate-key", config_file])
            if result.returncode != 0:
                self.log_error("‚ùå Error generando llave maestra")
                sys.exit(1)
                
            self.log_success("‚úÖ Llave maestra generada")
            
            # Obtener huella digital completa de la llave maestra
            result = self.run_command(["gpg", "--list-secret-keys", "--with-colons", "--fingerprint"])
            if result.returncode != 0:
                self.log_error("No se pudo obtener ID de la llave maestra")
                sys.exit(1)
                
            # Buscar la huella digital completa
            lines = result.stdout.split('\n')
            for i, line in enumerate(lines):
                if line.startswith('sec:'):
                    # Buscar la l√≠nea fpr: siguiente
                    for j in range(i+1, min(i+5, len(lines))):
                        if lines[j].startswith('fpr:'):
                            # Formato: fpr:::::::::FINGERPRINT:
                            fingerprint = lines[j].split(':')[9]
                            if fingerprint:
                                self.log_success(f"ID de llave maestra: {fingerprint[-16:]}")
                                return fingerprint
                        
            self.log_error("No se pudo obtener huella digital de la llave maestra")
            sys.exit(1)
            
        finally:
            # Limpiar archivo temporal
            os.unlink(config_file)
            
    def configure_gpg_for_automation(self):
        """Configurar GPG para automatizaci√≥n con pinentry-mode loopback solo si no hay entorno gr√°fico"""
        gpg_conf = self.gpg_home / "gpg.conf"
        gpg_agent_conf = self.gpg_home / "gpg-agent.conf"
        
        # Verificar si ya hay configuraci√≥n de pinentry gr√°fico
        has_graphical_pinentry = False
        if gpg_agent_conf.exists():
            with open(gpg_agent_conf, 'r') as f:
                content = f.read()
                if 'pinentry-program' in content:
                    has_graphical_pinentry = True
        
        # Solo configurar loopback si no hay pinentry gr√°fico
        if not has_graphical_pinentry:
            self.log_info("üìü Configurando pinentry loopback para automatizaci√≥n")
            
            # Configurar gpg.conf
            with open(gpg_conf, 'a') as f:
                f.write("\n# Configuraci√≥n para automatizaci√≥n\n")
                f.write("use-agent\n")
                f.write("pinentry-mode loopback\n")
            
            # Configurar gpg-agent.conf
            with open(gpg_agent_conf, 'a') as f:
                f.write("\n# Configuraci√≥n para automatizaci√≥n\n")
                f.write("allow-loopback-pinentry\n")
            
            # Recargar gpg-agent
            self.run_command(["gpg-connect-agent", "reloadagent", "/bye"])
        else:
            self.log_info("üñ•Ô∏è  Pinentry gr√°fico detectado - manteniendo configuraci√≥n existente")
    
    def generate_subkeys(self, master_key_id: str, passphrase: str):
        """Generar subclaves usando --quick-add-key"""
        self.log_info("üîë Generando subclaves...")
        
        # Configurar GPG para automatizaci√≥n
        self.configure_gpg_for_automation()
        
        # Subclaves a crear: [algoritmo, uso, expiraci√≥n]
        subkeys = [
            ("rsa4096", "sign", "1y"),
            ("rsa4096", "encrypt", "1y"),
            ("rsa4096", "auth", "1y")
        ]
        
        for algo, usage, expire in subkeys:
            try:
                self.log_info(f"Generando subclave {usage.upper()} ({algo})...")
                
                # Crear subclave usando --quick-add-key
                result = self.run_command([
                    "gpg", "--batch", "--yes",
                    "--pinentry-mode", "loopback",
                    "--passphrase-fd", "0",
                    "--quick-add-key", master_key_id,
                    algo, usage, expire
                ], input_data=passphrase)
                
                if result.returncode == 0:
                    self.log_success(f"‚úÖ Subclave {usage.upper()} creada")
                else:
                    self.log_warning(f"‚ö†Ô∏è  Error creando subclave {usage.upper()}")
                    self.log_error(result.stderr)
                    
            except Exception as e:
                self.log_error(f"Error creando subclave {usage}: {e}")
            
    def create_revocation_certificate(self, master_key_id: str, passphrase: str):
        """Crear certificado de revocaci√≥n"""
        self.log_info("üîí Creando certificado de revocaci√≥n...")
        
        # Guardar en ~/secure/gpg/ en lugar de backup/
        secure_gpg_dir = Path.home() / "secure" / "gpg"
        secure_gpg_dir.mkdir(parents=True, exist_ok=True)
        
        revocation_file = secure_gpg_dir / f"revocation-cert-{master_key_id}.asc"
        
        try:
            # GPG genera autom√°ticamente un certificado de revocaci√≥n al crear la clave
            # Se guarda en ~/.gnupg/openpgp-revocs.d/
            revocs_dir = self.gpg_home / "openpgp-revocs.d"
            
            if revocs_dir.exists():
                # Buscar el archivo de revocaci√≥n generado autom√°ticamente
                for rev_file in revocs_dir.glob("*.rev"):
                    if master_key_id in rev_file.name:
                        # Copiar el certificado a ~/secure/gpg/
                        import shutil
                        shutil.copy2(rev_file, revocation_file)
                        self.log_success(f"‚úÖ Certificado de revocaci√≥n copiado: {revocation_file.name}")
                        self.log_info(f"üìÅ Ubicaci√≥n: {revocation_file}")
                        return
                        
            # Si no se encuentra el certificado autom√°tico, informar al usuario
            self.log_warning("‚ö†Ô∏è  No se encontr√≥ certificado de revocaci√≥n autom√°tico")
            self.log_info("GPG deber√≠a haber generado uno autom√°ticamente en ~/.gnupg/openpgp-revocs.d/")
            self.log_info(f"Ejecute manualmente: gpg --output {revocation_file} --gen-revoke {master_key_id}")
                
        except Exception as e:
            self.log_error(f"Error copiando certificado de revocaci√≥n: {e}")
            self.log_info(f"Ejecute manualmente: gpg --output {revocation_file} --gen-revoke {master_key_id}")
            
    def show_generated_keys_info(self, master_key_id: str):
        """Mostrar informaci√≥n de las claves generadas"""
        print("\n" + "="*50)
        print("üéâ LLAVES GENERADAS EXITOSAMENTE")
        print("="*50 + "\n")
        
        print("üîë Llave Maestra:")
        print(f"   ID: {master_key_id}")
        print("   Uso: Certificaci√≥n (C) + Firma (S)")
        print("   Expiraci√≥n: Nunca")
        print()
        
        print("üîë Subclaves:")
        result = self.run_command(["gpg", "--list-keys", "--with-colons", master_key_id])
        if result.returncode == 0:
            for line in result.stdout.split('\n'):
                if line.startswith('sub:'):
                    parts = line.split(':')
                    key_id = parts[4]
                    key_usage = parts[11]
                    key_expiry = parts[6]
                    
                    if key_expiry == "0":
                        expiry_text = "Nunca"
                    else:
                        try:
                            expiry_date = datetime.fromtimestamp(int(key_expiry))
                            expiry_text = expiry_date.strftime("%Y-%m-%d")
                        except:
                            expiry_text = "Desconocido"
                    
                    if 'e' in key_usage:
                        print(f"   üìß Cifrado (E): {key_id} - Expira: {expiry_text}")
                    elif 'a' in key_usage:
                        print(f"   üîê Autenticaci√≥n (A): {key_id} - Expira: {expiry_text}")
                    elif 's' in key_usage:
                        print(f"   ‚úçÔ∏è  Firma (S): {key_id} - Expira: {expiry_text}")
        
        print()
        print("üí° Pr√≥ximos pasos:")
        print(f"   1. Configurar Git: git config --global user.signingkey {master_key_id}")
        print(f"   2. Subir claves: gpg --send-keys {master_key_id}")
        print("   3. Verificar claves: gpg --list-keys")
        print()
        
    def generate_master_key_and_subkeys(self):
        """Generar llave maestra y subclaves"""
        self.log_info("üîë Generando llave maestra y subclaves para desarrollo...")
        
        # Verificar que GPG est√© inicializado
        if not self.gpg_home.exists():
            self.log_error("GPG no est√° inicializado. Ejecute: gpg-manager.py --init")
            sys.exit(1)
            
        # Obtener informaci√≥n del usuario
        user_info = self.get_user_key_info()
        
        # Generar llave maestra
        master_key_id = self.generate_master_key(user_info)
        
        # Generar subclaves
        self.generate_subkeys(master_key_id, user_info['passphrase'])
        
        # Crear certificado de revocaci√≥n
        self.create_revocation_certificate(master_key_id, user_info['passphrase'])
        
        # Mostrar informaci√≥n de las claves generadas
        self.show_generated_keys_info(master_key_id)
        
        # Exportar llave maestra para almacenamiento offline
        self.log_info("üîê Exportando llave maestra para almacenamiento offline...")
        self.export_master_key_offline(master_key_id, user_info['passphrase'])
        
        # Crear backup autom√°tico
        self.log_info("üíæ Creando backup autom√°tico de subclaves...")
        self.create_portable_gpg_backup()
        
        self.log_success("‚úÖ Llave maestra y subclaves generadas exitosamente")
        
    def export_master_key_offline(self, master_key_id: str, passphrase: str):
        """Exportar llave maestra para almacenamiento offline cifrado"""
        secure_gpg_dir = Path.home() / "secure" / "gpg"
        secure_gpg_dir.mkdir(parents=True, exist_ok=True)
        
        # Archivos de exportaci√≥n
        master_key_file = secure_gpg_dir / f"master-key-{master_key_id}.asc"
        
        try:
            # Exportar llave maestra (solo certificaci√≥n)
            result = self.run_command([
                "gpg", "--armor", "--export-secret-keys", 
                "--pinentry-mode", "loopback",
                "--passphrase-fd", "0",
                master_key_id
            ], input_data=passphrase)
            
            if result.returncode != 0:
                self.log_error(f"Error exportando llave maestra: {result.stderr}")
                return False
                
            # Guardar llave maestra
            with open(master_key_file, 'w') as f:
                f.write(result.stdout)
            
            self.log_success(f"‚úÖ Llave maestra exportada: {master_key_file.name}")
            
            
            # Exportar solo las subclaves secretas y eliminar la llave maestra
            self.log_info("üóëÔ∏è  Exportando subclaves y eliminando llave maestra del keyring local...")
            
            # Exportar solo las subclaves secretas
            subkeys_file = secure_gpg_dir / f"subkeys-{master_key_id}.asc"
            subkeys_result = self.run_command([
                "gpg", "--armor", "--export-secret-subkeys", 
                "--pinentry-mode", "loopback",
                "--passphrase-fd", "0",
                master_key_id
            ], input_data=passphrase)
            
            if subkeys_result.returncode == 0:
                # Guardar las subclaves
                with open(subkeys_file, 'w') as f:
                    f.write(subkeys_result.stdout)
                self.log_success(f"‚úÖ Subclaves exportadas: {subkeys_file.name}")
                
                # Eliminar la clave maestra secreta (esto mantiene las subclaves)
                delete_result = self.run_command([
                    "gpg", "--delete-secret-key", "--batch", "--yes",
                    master_key_id
                ])
                
                if delete_result.returncode == 0:
                    self.log_success("‚úÖ Llave maestra eliminada del keyring local")
                    
                    # Importar las subclaves de vuelta
                    import_result = self.run_command([
                        "gpg", "--import", str(subkeys_file)
                    ])
                    
                    if import_result.returncode == 0:
                        self.log_success("‚úÖ Subclaves importadas de vuelta al keyring")
                    else:
                        self.log_error("Error importando subclaves")
                        return False
                else:
                    self.log_error("Error eliminando llave maestra")
                    return False
            else:
                self.log_error("Error exportando subclaves")
                return False
                
            print("\n" + "="*60)
            print("üîê LLAVE MAESTRA EXPORTADA PARA ALMACENAMIENTO OFFLINE")
            print("="*60)
            print(f"üîë ID de llave maestra: {master_key_id}")
            print(f"üìÅ Ubicaci√≥n: {secure_gpg_dir}")
            print(f"üìÑ Archivo: {master_key_file.name}")
            print(f"üìÑ Subclaves: {subkeys_file.name}")
            print()
            print("‚ö†Ô∏è  IMPORTANTE:")
            print("1. Guarde la llave maestra en un lugar seguro (USB, papel)")
            print("2. NO la mantenga en el sistema de archivos local")
            print("3. Use solo para revocar subclaves o crear nuevas")
            print("4. Las subclaves siguen funcionando normalmente")
            print("="*60)
            
            return True
                
        except Exception as e:
            self.log_error(f"Error en exportaci√≥n offline: {e}")
            return False
        
    def initialize_gpg(self):
        """Inicializar configuraci√≥n GPG"""
        self.log_info("üöÄ Inicializando configuraci√≥n GPG...")
        
        # Verificar si ya existe
        if self.gpg_home.exists():
            self.log_warning(f"El directorio GPG ya existe: {self.gpg_home}")
            try:
                response = input("¬øDesea continuar y sobrescribir la configuraci√≥n? [y/N]: ")
                if response.lower() != 'y':
                    self.log_info("Inicializaci√≥n cancelada")
                    return
            except (EOFError, KeyboardInterrupt):
                self.log_info("Inicializaci√≥n cancelada")
                return
                
            # Crear backup de la configuraci√≥n existente
            self.log_info("üíæ Creando backup de configuraci√≥n existente...")
            self.create_portable_gpg_backup()
            self.log_success("Backup de configuraci√≥n existente completado")
            
            # Remover configuraci√≥n existente
            shutil.rmtree(self.gpg_home)
            
        # Crear directorio GPG
        self.log_info(f"üìÅ Creando directorio GPG: {self.gpg_home}")
        self.gpg_home.mkdir(parents=True, exist_ok=True)
        
        # Establecer permisos correctos
        self.log_info("üîê Estableciendo permisos de seguridad...")
        os.chmod(self.gpg_home, 0o700)
        
        # Crear archivo de configuraci√≥n b√°sico
        self.log_info("‚öôÔ∏è  Creando configuraci√≥n b√°sica...")
        gpg_conf = self.gpg_home / "gpg.conf"
        
        # Detectar si hay entorno gr√°fico disponible
        has_display = os.environ.get('DISPLAY') is not None
        has_wayland = os.environ.get('WAYLAND_DISPLAY') is not None
        has_graphical = has_display or has_wayland
        
        if has_graphical:
            self.log_info("üñ•Ô∏è  Entorno gr√°fico detectado - configurando pinentry gr√°fico")
            pinentry_config = ""
        else:
            self.log_info("üìü Solo terminal detectado - configurando pinentry loopback")
            pinentry_config = "pinentry-mode loopback\n"
        
        gpg_conf.write_text(f"""# Configuraci√≥n b√°sica de GPG
# Generada autom√°ticamente por gpg-manager.py --init

# Configuraci√≥n de claves
keyid-format 0xlong
with-fingerprint
with-keygrip

# Configuraci√≥n de cifrado
cipher-algo AES256
digest-algo SHA512
cert-digest-algo SHA512
compress-algo 1

# Configuraci√≥n de agent
use-agent
{pinentry_config}
# Configuraci√≥n de salida
armor
emit-version
no-comments
no-greeting

# Configuraci√≥n de confianza
trust-model tofu+pgp
auto-key-locate keyserver
keyserver hkps://keys.openpgp.org

# Configuraci√≥n de listado
list-options show-uid-validity
verify-options show-uid-validity
""")
        
        # Crear configuraci√≥n del agente
        self.log_info("ü§ñ Configurando agente GPG...")
        gpg_agent_conf = self.gpg_home / "gpg-agent.conf"
        
        # Configurar pinentry seg√∫n el entorno
        if has_graphical:
            # Detectar el mejor pinentry gr√°fico disponible
            pinentry_programs = [
                "/usr/bin/pinentry-gnome3",
                "/usr/bin/pinentry-gtk-2", 
                "/usr/bin/pinentry-gtk",
                "/usr/bin/pinentry-qt",
                "/usr/bin/pinentry"
            ]
            
            pinentry_program = "/usr/bin/pinentry"
            for program in pinentry_programs:
                if shutil.which(program):
                    pinentry_program = program
                    break
            
            self.log_info(f"üñ•Ô∏è  Usando pinentry gr√°fico: {pinentry_program}")
            agent_config = f"""# Configuraci√≥n del agente GPG
# Generada autom√°ticamente por gpg-manager.py --init

# Configuraci√≥n de pinentry
pinentry-program {pinentry_program}

# Configuraci√≥n de cach√©
default-cache-ttl 600
max-cache-ttl 7200

# Configuraci√≥n de SSH
enable-ssh-support

# Configuraci√≥n de scdaemon
scdaemon-program /usr/lib/gnupg/scdaemon
"""
        else:
            self.log_info("üìü Configurando pinentry loopback para terminal")
            agent_config = """# Configuraci√≥n del agente GPG
# Generada autom√°ticamente por gpg-manager.py --init

# Configuraci√≥n de pinentry para terminal
allow-loopback-pinentry

# Configuraci√≥n de cach√©
default-cache-ttl 600
max-cache-ttl 7200

# Configuraci√≥n de SSH
enable-ssh-support

# Configuraci√≥n de scdaemon
scdaemon-program /usr/lib/gnupg/scdaemon
"""
        
        gpg_agent_conf.write_text(agent_config)
        
        # Establecer permisos en archivos de configuraci√≥n
        os.chmod(gpg_conf, 0o600)
        os.chmod(gpg_agent_conf, 0o600)
        
        # Crear archivo de trust b√°sico
        self.log_info("üîí Inicializando base de confianza...")
        self.run_command(["gpg", "--check-trustdb"])
        
        # Verificar instalaci√≥n
        self.log_info("‚úÖ Verificando instalaci√≥n...")
        if self.check_gpg_available():
            self.log_success("GPG funcionando correctamente")
        else:
            self.log_error("Error: GPG no est√° funcionando correctamente")
            sys.exit(1)
            
        # Mostrar informaci√≥n de la instalaci√≥n
        self.show_initialization_info()
        
    def show_initialization_info(self):
        """Mostrar informaci√≥n de la inicializaci√≥n"""
        print("\n" + "="*50)
        print("üéâ ¬°INICIALIZACI√ìN COMPLETADA!")
        print("="*50 + "\n")
        
        print(f"üìÅ Directorio GPG: {self.gpg_home}")
        print(f"‚öôÔ∏è  Configuraci√≥n: {self.gpg_home}/gpg.conf")
        print(f"ü§ñ Agente: {self.gpg_home}/gpg-agent.conf")
        print()
        
        print("üîë Pr√≥ximos pasos:")
        print("   1. Generar una clave: gpg --gen-key")
        print("   2. Listar claves: gpg --list-keys")
        print("   3. Crear backup: gpg-manager.py --backup")
        print()
        
        print("üíæ Backup de configuraci√≥n anterior:")
        print("   Si exist√≠a configuraci√≥n previa, se cre√≥ un backup autom√°tico")
        print("   Ver backups disponibles: gpg-manager.py --list")
        print()
        
        print("üí° Comandos √∫tiles:")
        print("   gpg --gen-key                    Generar nueva clave")
        print("   gpg --list-keys                  Ver claves p√∫blicas")
        print("   gpg --list-secret-keys           Ver claves privadas")
        print("   gpg --edit-key <keyid>           Editar clave")
        print("   gpg --send-keys <keyid>          Subir clave a servidor")
        print()
        
        print("üåê Para usar en otra m√°quina:")
        print("   gpg-manager.py --backup          Crear backup portable")
        print("   gpg-manager.py --restore <file>  Restaurar backup")
        print()
        
    def create_portable_gpg_backup(self):
        """Crear backup portable de GPG"""
        self.log_info("üåê Creando backup portable de configuraci√≥n GPG...")
        
        # Verificar pre-requisitos
        self.check_backup_prerequisites()
        
        # Crear directorio de backup
        self.create_backup_directory()
        
        # Detener procesos GPG
        self.stop_gpg_processes()
        
        # Crear backup principal
        self.create_main_backup()
        
        # Crear checksum
        self.create_backup_integrity_check()
        
        # Verificar backup creado
        self.verify_backup_structure()
        
        backup_file = self.backup_dir / f"gpg-{self.timestamp}.tar.gz"
        self.log_success(f"‚úÖ Backup completado: {backup_file.name}")
        
    def check_backup_prerequisites(self):
        """Verificar pre-requisitos para backup"""
        if not self.gpg_home.exists():
            self.log_error(f"No existe directorio GPG: {self.gpg_home}")
            sys.exit(1)
            
        # Verificar herramientas necesarias
        for tool in ["tar", "sha256sum"]:
            result = self.run_command(["which", tool])
            if result.returncode != 0:
                self.log_error(f"{tool} no disponible")
                sys.exit(1)
                
    def create_backup_directory(self):
        """Crear directorio de backup"""
        self.backup_dir.mkdir(parents=True, exist_ok=True)
        self.cleanup_old_backups()
        
    def cleanup_old_backups(self):
        """Limpiar backups antiguos (mantener √∫ltimos 5)"""
        backup_files = list(self.backup_dir.glob("gpg-*.tar.gz"))
        if len(backup_files) > 5:
            # Ordenar por fecha de modificaci√≥n y eliminar los m√°s antiguos
            backup_files.sort(key=lambda x: x.stat().st_mtime)
            for old_file in backup_files[:-5]:
                old_file.unlink()
                
    def stop_gpg_processes(self):
        """Detener procesos GPG"""
        try:
            # Detener gpg-agent
            result = self.run_command(["pkill", "-TERM", "gpg-agent"])
            if result.returncode == 0:
                time.sleep(2)
                # Si sigue corriendo, forzar terminaci√≥n
                self.run_command(["pkill", "-KILL", "gpg-agent"])
        except Exception:
            pass  # Ignorar errores
            
    def create_main_backup(self):
        """Crear backup principal"""
        backup_file = self.backup_dir / f"gpg-{self.timestamp}.tar.gz"
        
        # Crear backup excluyendo archivos temporales
        result = self.run_command([
            "tar", "-czf", str(backup_file),
            "--exclude=*.lock",
            "--exclude=*trustdb.gpg",
            "--exclude=random_seed",
            "--exclude=.#lk*",
            "--exclude=S.*",
            "--exclude=*.tmp",
            "--directory", str(self.gpg_home.parent),
            ".gnupg/"
        ])
        
        if result.returncode != 0 or not backup_file.exists():
            self.log_error("Error creando backup principal")
            sys.exit(1)
            
    def create_backup_integrity_check(self):
        """Crear verificaci√≥n de integridad"""
        backup_file = self.backup_dir / f"gpg-{self.timestamp}.tar.gz"
        checksum_file = backup_file.with_suffix(".tar.gz.sha256")
        
        if backup_file.exists():
            # Crear checksum
            result = self.run_command(["sha256sum", str(backup_file)])
            if result.returncode == 0:
                checksum_file.write_text(result.stdout)
                
                # Verificar inmediatamente
                verify_result = self.run_command(["sha256sum", "-c", str(checksum_file)])
                if verify_result.returncode != 0:
                    self.log_error("‚ùå Error de integridad detectado")
                    sys.exit(1)
                    
    def verify_backup_structure(self):
        """Verificar estructura del backup"""
        backup_file = self.backup_dir / f"gpg-{self.timestamp}.tar.gz"
        
        if not backup_file.exists():
            self.log_error("Backup principal no encontrado")
            sys.exit(1)
            
        # Verificar estructura temporalmente
        with tempfile.TemporaryDirectory() as temp_dir:
            result = self.run_command(["tar", "-xzf", str(backup_file), "-C", temp_dir])
            if result.returncode != 0:
                self.log_error("‚ùå Error extrayendo backup")
                sys.exit(1)
                
            # Verificar estructura esperada
            if not Path(temp_dir, ".gnupg").exists():
                self.log_error("‚ùå Estructura de backup inv√°lida")
                sys.exit(1)
                
    def restore_portable_gpg(self, backup_file: str):
        """Restaurar backup portable"""
        if not backup_file:
            self.log_error("Falta especificar archivo de backup")
            sys.exit(1)
            
        backup_path = Path(backup_file)
        if not backup_path.exists():
            self.log_error(f"No existe el archivo: {backup_file}")
            sys.exit(1)
            
        self.log_info("üîÑ Restaurando backup portable...")
        
        # Crear backup de la configuraci√≥n actual
        if self.gpg_home.exists():
            self.log_info("üíæ Creando backup de configuraci√≥n actual...")
            self.create_portable_gpg_backup()
            
        # Extraer backup
        with tempfile.TemporaryDirectory() as temp_dir:
            result = self.run_command(["tar", "-xzf", str(backup_path), "-C", temp_dir])
            if result.returncode != 0:
                self.log_error("Error extrayendo backup")
                sys.exit(1)
                
            # Remover configuraci√≥n actual
            if self.gpg_home.exists():
                shutil.rmtree(self.gpg_home)
                
            # Copiar nueva configuraci√≥n
            source_gnupg = Path(temp_dir, ".gnupg")
            if source_gnupg.exists():
                shutil.copytree(source_gnupg, self.gpg_home)
                os.chmod(self.gpg_home, 0o700)
                self.log_success("‚úÖ Backup restaurado exitosamente")
            else:
                self.log_error("‚ùå Estructura de backup inv√°lida")
                sys.exit(1)
                
    def verify_backup_integrity(self, backup_file: str):
        """Verificar integridad del backup"""
        if not backup_file:
            self.log_error("Falta especificar archivo de backup")
            sys.exit(1)
            
        backup_path = Path(backup_file)
        if not backup_path.exists():
            self.log_error(f"No existe el archivo: {backup_file}")
            sys.exit(1)
            
        print("\n" + "="*50)
        print("üîç VERIFICACI√ìN DE INTEGRIDAD DE BACKUP")
        print("="*50 + "\n")
        
        if backup_path.suffix == ".gz" and backup_path.name.endswith(".tar.gz"):
            self.verify_direct_backup(backup_path)
        elif backup_path.suffix == ".asc":
            self.verify_encrypted_backup(backup_path)
        else:
            self.log_error(f"Formato no reconocido: {backup_file}")
            sys.exit(1)
            
    def verify_direct_backup(self, backup_file: Path):
        """Verificar backup directo"""
        self.log_info(f"Verificando backup directo: {backup_file.name}")
        
        # Verificar checksum
        checksum_file = backup_file.with_suffix(".tar.gz.sha256")
        if checksum_file.exists():
            self.log_info("Verificando checksum...")
            result = self.run_command(["sha256sum", "-c", str(checksum_file)])
            if result.returncode == 0:
                self.log_success("‚úÖ Checksum verificado correctamente")
            else:
                self.log_error("‚ùå Error en checksum - backup corrupto")
                sys.exit(1)
        else:
            self.log_warning("No se encontr√≥ archivo checksum (.sha256)")
            
        # Verificar estructura
        self.log_info("Verificando estructura del tar...")
        result = self.run_command(["tar", "-tzf", str(backup_file)])
        if result.returncode == 0:
            self.log_success("‚úÖ Estructura de tar v√°lida")
            
            # Mostrar contenido principal
            self.log_info("Contenido principal del backup:")
            lines = result.stdout.split('\n')
            gnupg_files = [line for line in lines if '.gnupg/' in line][:10]
            for file in gnupg_files:
                print(f"   {file}")
            print(f"   ... ({len(lines)} archivos total)")
        else:
            self.log_error("‚ùå Error en estructura de tar")
            sys.exit(1)
            
        # Verificar tama√±o
        file_size = backup_file.stat().st_size
        size_mb = file_size / (1024 * 1024)
        self.log_info(f"Tama√±o del backup: {size_mb:.1f} MB")
        
        # Verificar fecha de creaci√≥n
        creation_time = datetime.fromtimestamp(backup_file.stat().st_mtime)
        self.log_info(f"Fecha creado: {creation_time.strftime('%Y-%m-%d %H:%M:%S')}")
        
        print()
        self.log_success("‚úÖ Backup verificado correctamente - listo para restauraci√≥n")
        
    def verify_encrypted_backup(self, backup_file: Path):
        """Verificar backup cifrado"""
        self.log_info(f"Verificando backup cifrado: {backup_file.name}")
        
        # Verificar que es un archivo cifrado v√°lido
        self.log_info("Verificando archivo cifrado...")
        result = self.run_command(["gpg", "--decrypt", "--dry-run", str(backup_file)])
        if result.returncode == 0:
            self.log_success("‚úÖ Archivo cifrado v√°lido")
            self.log_info("‚ö†Ô∏è  Para verificaci√≥n completa se requiere contrase√±a")
        else:
            self.log_error("‚ùå Archivo cifrado inv√°lido o corrupto")
            sys.exit(1)
            
        print()
        self.log_success("‚úÖ Backup cifrado verificado b√°sicamente - requiere contrase√±a para uso completo")
        
    def list_available_backups(self):
        """Listar backups disponibles"""
        print("\n" + "="*50)
        print("üìã BACKUPS DISPONIBLES")
        print("="*50 + "\n")
        
        if not self.backup_dir.exists():
            self.log_warning(f"No existe directorio de backups: {self.backup_dir}")
            return
            
        print(f"üìÅ Directorio: {self.backup_dir}")
        print()
        
        # Mostrar backups directos
        print("üì¶ Backups Directos:")
        backup_files = list(self.backup_dir.glob("gpg-*.tar.gz"))
        if backup_files:
            for backup_file in sorted(backup_files, key=lambda x: x.stat().st_mtime, reverse=True):
                size_mb = backup_file.stat().st_size / (1024 * 1024)
                mtime = datetime.fromtimestamp(backup_file.stat().st_mtime)
                print(f"   üìÑ {backup_file.name} - {size_mb:.1f} MB - {mtime.strftime('%Y-%m-%d %H:%M')}")
        else:
            print("   No hay backups directos")
            
        print()
        
        # Mostrar checksums si existen
        checksum_files = list(self.backup_dir.glob("gpg-*.sha256"))
        if checksum_files:
            print("üîç Verificaciones de Integridad:")
            for checksum_file in checksum_files:
                print(f"   ‚úÖ {checksum_file.name}")
                
        print()
        
    def configure_git_for_gpg(self):
        """Configurar Git para usar GPG con la subclave de firma"""
        self.log_info("üîß Configurando Git para GPG...")
        
        # Buscar la subclave de firma (S) en las claves p√∫blicas
        result = self.run_command(["gpg", "--list-keys", "--keyid-format", "LONG"])
        if result.returncode != 0:
            self.log_error("No se pudieron listar las claves")
            return False
            
        signing_key = None
        lines = result.stdout.split('\n')
        
        for line in lines:
            if line.startswith('sub') and '[S]' in line:
                # Extraer el ID de la subclave de firma
                parts = line.split()
                for part in parts:
                    if '/' in part and 'sub' in line:
                        signing_key = part.split('/')[1]
                        break
                if signing_key:
                    break
        
        if not signing_key:
            self.log_error("No se encontr√≥ subclave de firma (S)")
            self.log_info("Aseg√∫rese de tener una subclave con capacidad de firma")
            return False
            
        self.log_success(f"Subclave de firma encontrada: {signing_key}")
        
        # Obtener informaci√≥n del usuario de la llave
        user_name = None
        user_email = None
        
        # Buscar informaci√≥n del usuario en las claves p√∫blicas
        pub_result = self.run_command(["gpg", "--list-keys", "--keyid-format", "LONG"])
        if pub_result.returncode == 0:
            pub_lines = pub_result.stdout.split('\n')
            for line in pub_lines:
                if line.startswith('uid'):
                    # Formato: uid [ultimate] Nombre <email>
                    if '<' in line and '>' in line:
                        # Extraer nombre y email
                        parts = line.split('<')
                        if len(parts) >= 2:
                            name_part = parts[0].strip()
                            email_part = parts[1].split('>')[0].strip()
                            
                            # Limpiar el nombre (remover [ultimate], etc.)
                            name_clean = name_part.split(']')[-1].strip() if ']' in name_part else name_part
                            
                            user_name = name_clean
                            user_email = email_part
                            break
        
        # Configurar Git
        git_configs = [
            ("user.signingkey", signing_key),
            ("commit.gpgsign", "true"),
            ("gpg.program", "gpg"),
            ("tag.gpgSign", "true")
        ]
        
        # Agregar nombre y email si se encontraron
        if user_name:
            git_configs.append(("user.name", user_name))
        if user_email:
            git_configs.append(("user.email", user_email))
        
        for key, value in git_configs:
            result = self.run_command(["git", "config", "--global", key, value])
            if result.returncode == 0:
                self.log_success(f"‚úÖ Git configurado: {key} = {value}")
            else:
                self.log_warning(f"‚ö†Ô∏è  Error configurando: {key}")
                
        # Configurar GPG para automatizaci√≥n
        self.configure_gpg_for_automation()
        
        # Configurar GPG_TTY para Git (solo si hay TTY disponible)
        try:
            tty_result = os.popen('tty').read().strip()
            if tty_result and 'not a tty' not in tty_result:
                os.environ['GPG_TTY'] = tty_result
                self.log_success(f"‚úÖ GPG_TTY configurado: {tty_result}")
            else:
                self.log_warning("‚ö†Ô∏è  No hay TTY disponible - GPG puede requerir configuraci√≥n manual")
                self.log_info("üí° Para scripts: export GPG_TTY=$(tty)")
        except Exception as e:
            self.log_warning(f"‚ö†Ô∏è  Error configurando GPG_TTY: {e}")
        
        # Verificar configuraci√≥n
        self.log_info("üîç Verificando configuraci√≥n...")
        result = self.run_command(["git", "config", "--global", "--get", "user.signingkey"])
        if result.returncode == 0 and result.stdout.strip() == signing_key:
            self.log_success("‚úÖ Git configurado correctamente para GPG")
            
            print("\n" + "="*50)
            print("üéâ CONFIGURACI√ìN GIT-GPG COMPLETADA")
            print("="*50)
            print(f"üîë Subclave de firma: {signing_key}")
            if user_name:
                print(f"üë§ Nombre: {user_name}")
            if user_email:
                print(f"üìß Email: {user_email}")
            print("üìù Commits firmados: Activado")
            print("üè∑Ô∏è  Tags firmados: Activado")
            print("üîß GPG program: gpg")
            print()
            print("üí° Pr√≥ximos pasos:")
            print("1. Probar firma: git commit --allow-empty -m 'Test GPG signature'")
            print("2. Verificar: git log --show-signature")
            print("3. Configurar GitHub: Agregar clave p√∫blica en Settings > SSH and GPG keys")
            print()
            print("‚ö†Ô∏è  Nota sobre entornos sin TTY (Cursor, scripts):")
            print("   - GPG puede requerir configuraci√≥n manual de GPG_TTY")
            print("   - En terminal interactivo: export GPG_TTY=$(tty)")
            print("   - Para scripts: configurar pinentry-mode loopback")
            print("="*50)
            
            return True
        else:
            self.log_error("‚ùå Error en la configuraci√≥n de Git")
            return False

    def show_help(self):
        """Mostrar ayuda"""
        print("\n" + "="*50)
        print("üöÄ GPG BACKUP MANAGER v1.0.0")
        print("="*50 + "\n")
        
        print("Gestor especializado de backups portables de GPG")
        print("Prioridad: BACKUP y RESTORE para uso cross-platform")
        print()
        
        print("Uso:")
        print("  gpg-manager.py --init                            Inicializar configuraci√≥n GPG")
        print("  gpg-manager.py --gen-key                         Generar llave maestra y subclaves")
        print("  gpg-manager.py --git-config                      Configurar Git para GPG")
        print("  gpg-manager.py --backup                           Crear backup portable")
        print("  gpg-manager.py --restore <archivo-backup>        Restaurar backup")
        print("  gpg-manager.py --verify <archivo-backup>         Verificar integridad")
        print("  gpg-manager.py --list                            Listar backups disponibles")
        print("  gpg-manager.py --help                            Mostrar esta ayuda")
        print()
        
        print("Ejemplos:")
        print("  gpg-manager.py --init")
        print("  gpg-manager.py --gen-key")
        print("  gpg-manager.py --git-config")
        print("  gpg-manager.py --backup")
        print("  gpg-manager.py --restore gpg-20241214_143022.tar.gz")
        print("  gpg-manager.py --verify ~/backups/gpg-backup.tar.gz")
        print("  gpg-manager.py --list")
        print()


def main():
    """Funci√≥n principal"""
    parser = argparse.ArgumentParser(
        description="GPG Backup Manager v1.0.0",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Ejemplos:
  gpg-manager.py --init
  gpg-manager.py --gen-key
  gpg-manager.py --git-config
  gpg-manager.py --backup
  gpg-manager.py --restore gpg-20241214_143022.tar.gz
  gpg-manager.py --verify ~/backups/gpg-backup.tar.gz
  gpg-manager.py --list
        """
    )
    
    parser.add_argument("--init", "-i", action="store_true", 
                       help="Inicializar configuraci√≥n GPG")
    parser.add_argument("--gen-key", "-g", action="store_true",
                       help="Generar llave maestra y subclaves")
    parser.add_argument("--git-config", action="store_true",
                       help="Configurar Git para GPG")
    parser.add_argument("--backup", "-b", action="store_true",
                       help="Crear backup portable")
    parser.add_argument("--restore", "-r", metavar="ARCHIVO",
                       help="Restaurar backup")
    parser.add_argument("--verify", "-v", metavar="ARCHIVO",
                       help="Verificar integridad")
    parser.add_argument("--list", "-l", action="store_true",
                       help="Listar backups disponibles")
    
    args = parser.parse_args()
    
    # Si no se proporcionan argumentos, mostrar ayuda
    if not any(vars(args).values()):
        parser.print_help()
        return
        
    # Crear instancia del gestor
    gpg_manager = GPGManager()
    
    try:
        if args.init:
            gpg_manager.initialize_gpg()
        elif args.gen_key:
            gpg_manager.generate_master_key_and_subkeys()
        elif args.git_config:
            gpg_manager.configure_git_for_gpg()
        elif args.backup:
            gpg_manager.create_portable_gpg_backup()
        elif args.restore:
            gpg_manager.restore_portable_gpg(args.restore)
        elif args.verify:
            gpg_manager.verify_backup_integrity(args.verify)
        elif args.list:
            gpg_manager.list_available_backups()
        else:
            parser.print_help()
            
    except KeyboardInterrupt:
        print("\nOperaci√≥n cancelada por el usuario")
        sys.exit(1)
    except Exception as e:
        gpg_manager.log_error(f"Error inesperado: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
